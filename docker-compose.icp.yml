version: '3.8'

services:
  # ICP Frontend Canister
  icp-frontend:
    build:
      context: .
      dockerfile: Dockerfile.icp
    container_name: icp-frontend-93343-A7BDB-4F45F
    environment:
      - CANISTER_ID=93343-A7BDB-4F45F
      - ICP_NETWORK=ic
      - FRONTEND_URL=https://93343-A7BDB-4F45F.ic0.app
      - BACKEND_URL=https://93343-A7BDB-4F45F.ic0.app/api
    ports:
      - "5000:5000"
    volumes:
      - ./dist:/app/dist
      - ./canister-config.json:/app/canister-config.json
    healthcheck:
      test: ["CMD", "curl", "-f", "https://93343-A7BDB-4F45F.ic0.app/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ICP Backend Canister
  icp-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: icp-backend-93343-A7BDB-4F45F
    environment:
      - CANISTER_ID=93343-A7BDB-4F45F
      - ICP_NETWORK=ic
      - DATABASE_URL=postgresql://web3shipping:password123@postgres:5432/web3_shipping_platform
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - RUST_LOG=info
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - ./canister-config.json:/app/canister-config.json
    healthcheck:
      test: ["CMD", "curl", "-f", "https://93343-A7BDB-4F45F.ic0.app/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: icp-postgres-93343-A7BDB-4F45F
    environment:
      POSTGRES_DB: web3_shipping_platform
      POSTGRES_USER: web3shipping
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U web3shipping -d web3_shipping_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: icp-redis-93343-A7BDB-4F45F
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: icp-nginx-93343-A7BDB-4F45F
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.icp.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - icp-frontend
      - icp-backend
    restart: unless-stopped

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: icp-prometheus-93343-A7BDB-4F45F
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.icp.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: icp-grafana-93343-A7BDB-4F45F
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: icp-shipping-network-93343-A7BDB-4F45F
